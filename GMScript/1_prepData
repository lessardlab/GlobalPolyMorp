#### DATA PREPARATION #### 

#datamatching = polymorphism database 
#lat-longGABI = GABI database with lat/long coordinates
### 1. Creating data frame with poly_id ###

specieslist<-read.csv("NewData/FREDDIE_FOLD/matched-polymorphism_bg.csv")
subFa <- reshape::melt(stringr::str_split(specieslist$Subfamily, "\\t"))$value
specieslist$Subfamily <- subFa[!stringr::str_count(subFa) == 0]

occ<-read.csv("NewData/FREDDIE_FOLD/Lat-Long_Data_GABI.csv",stringsAsFactors = FALSE)

occ$valid_species_name <- as.factor(occ$valid_species_name)
occ$poly_id <- 0

specieslist$taxon_code <- paste0(specieslist$genus,".",specieslist$species)
for(i in 1:nrow(occ)){
  print(paste(i, "of", nrow(occ)))
  temp<-subset(specieslist,specieslist$taxon_code==occ$valid_species_name[i])
  occ$poly_id[i]<-temp$poly_id[1]
  cat("\014")
}
############
# match species names and add to a poly_id column


# fast alternative  
# occ$poly_id <- specieslist$poly_id[match(occ$valid_species_name,paste0(specieslist$genus,".",specieslist$species))]


occ_match<-occ[,-6] #elevation has too many NAs  
occ_match<-na.omit(occ_match)#remove NAs to be able to attribute continent




#############################################
### 2. Matching Continents Per Occurrence ###
#############################################

library(rworldmap)
library(rgeos)
library(maptools)
library(cleangeo)  ## For clgeo_Clean()
library(raster)
library(sp)

coords<-as.data.frame(cbind(occ_match$dec_long,occ_match$dec_lat))
colnames(coords)<-c("Lat","Long")
coords<-na.omit(coords)

coords<-SpatialPointsDataFrame(coords=coords,data=coords,proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
#convert coordinates into spatial object

cont<-rgdal::readOGR("SHP/ne_50m_admin_0_countries/ne_50m_admin_0_countries.shp") 

proj4string(coords)<- proj4string(cont) 

points<-over(coords,cont)#must remove NAs from dataframe

occ_match["Continent"]<-points$CONTINENT
# write.csv(occ,file="sites_withcontinents.csv")


### 3. Create density/site ID dataframe ### 

occ_match<-na.omit(occ_match)

new_id<-paste(ceiling(occ_match$dec_long),ceiling(occ_match$dec_lat),sep=".")#ceiling function rounds down

occ_id<-cbind(occ_match,new_id)

id.table<-as.data.frame(table(new_id))
occ_id$point_density<-NA

for(i in 1:nrow(id.table)){
  occ_id$point_density[which(occ_id$new_id==id.table$new_id[i])]<-id.table[i,2]
}

write.csv(occ_id,file="occ_withsitedensity.csv")
#must add in genus column manually in the file 

###########################
### 4. Extract Climate ###
###########################

library(sp)
library(raster)
library(vegan)

MAT<-raster("NewData/FREDDIE_FOLD/wc2.0_bio_10m_01.tif")
MAP<-raster("NewData/FREDDIE_FOLD/wc2.0_bio_10m_12.tif")

# Function to round variables to 1 deg resolution 
roundVar <- function(MAT){
  MAT1  <- scale(MAT)
  MATF <- data.frame(coordinates(MAT1), "val" = MAT1@data@values)
  MATF <- na.omit(MATF)
  MATF$x <- round(MATF$x)
  MATF$y <- round(MATF$y)
  MATF$id <- paste0(MATF$x,"_", MATF$y)
  MATF2 <- aggregate(MATF$val, list(MATF$id), median)
  return(MATF2)
  
  
  
}
# round global variables
MAP1 <- roundVar(MAP)
MAT1 <- roundVar(MAT)

### Extract variables ###

coords<-as.data.frame(cbind(occ_id$dec_long,occ_id$dec_lat))
coords<-SpatialPointsDataFrame(coords=coords,data=coords,proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))

# Note I extract from the globally scaled environment, not "ant distribution" scaled 
MAT.point<-extract(scale(MAT),coords)
MAP.point<-extract(scale(MAP),coords)

### Climate Data Frame ### 

climate<-as.data.frame(cbind(MAP.point,MAT.point))
# write.csv(climate,file="climate_perpoint.csv")

### Combine both Datasets ### 

occ_full<-as.data.frame(cbind(occ_id, climate))


### Subset all Data to Eliminate Seven Seas as Continent ### 

occ<-subset(occ_full,occ_full$Continent!="Seven seas (open ocean)")
occ$Continent<-factor(occ$Continent)
occ$new_id<-factor(occ$new_id)
occ$genus <- specieslist$genus[match(occ$valid_species_name, paste0(specieslist$genus, ".",specieslist$species))]
occ$subFamily <- specieslist$Subfamily[match(occ$valid_species_name,paste0(specieslist$genus, ".", specieslist$species))]

write.csv(occ,file="occ_withsitedensity.csv") # good file to use 

#### 5. FINDING CENTROID ####

#library(geosphere)
#library(dplyr)
#library(ggplot2)

#occ<-read.csv("occ_withsitedensity.csv",stringsAsFactors = FALSE)

#for(z in 1:2) {
  
  #for(i in 1:length(unique(occ$genus))) {
    #x<-subset(occ,occ$genus==unique(occ$genus)[i])
   # precip5[i,2*z-1] <- mean(x[which(x[,z + 1] >= quantile(x[,z+1], 0.95)),z + 1], na.rm = TRUE)
   # precip5[i,2*z] <- mean(x[which(x[,z + 1] <= quantile(x[,z+1], 0.05)),z + 1], na.rm = TRUE)
  #}
#}


###############################
# 6. Species per grid cell avg#
###############################

occ<-read.csv("occ_withsitedensity.csv",stringsAsFactors = FALSE)


trial <- aggregate(occ$MAP.point, list(occ$valid_species_name, occ$new_id), mean)
colnames(trial) <- c("valid_species_name", "new_id", "MAP.point")
trial$MAT.point <- aggregate(occ$MAT.point, list(occ$valid_species_name, occ$new_id), mean)$x
trial$poly_id <- aggregate(occ$poly_id, list(occ$valid_species_name, occ$new_id), mean)$x
write.csv(trial,file="new_occ_df.csv")
